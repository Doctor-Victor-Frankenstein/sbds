# -*- coding: utf-8 -*-
import itertools as it

from funcy import flatten

from sqlalchemy import Column
from sqlalchemy import Text
from sqlalchemy import BigInteger
from sqlalchemy.orm import relationship

from sbds.storages.db.tables import Base


class Account(Base):
    """Steem Account Meta Class

    """

    __tablename__ = 'sbds_meta_accounts'
    id = Column(BigInteger, autoincrement=True, primary_key=True)
    name = Column(Text)




OPERATION_TO_ACCOUNT_FIELD_MAP = {{ grouped_refs|pprint }}


ACCOUNT_NAME_EXTRACTORS = {
    {% for short_name,fields in grouped_refs.items() -%}
        '{{ short_name }}': lambda op: [acct for acct in set(flatten(({% for f in fields %}op.get('{{ f }}'),{% endfor %}))) if acct],
    {% endfor -%}
}

def extract_account_names(prepared_ops):
    accounts_tuples = (ACCOUNT_NAME_EXTRACTORS[op['operation_type']](op) for op in prepared_ops if op['operation_type'] in ACCOUNT_NAME_EXTRACTORS)
    return set(acct for acct in it.chain(*accounts_tuples) if acct)
