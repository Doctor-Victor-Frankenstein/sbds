# -*- coding: utf-8 -*-
import dateutil.parser

from funcy import flatten
from sqlalchemy import DateTime
from sqlalchemy import func
from sqlalchemy import String
from sqlalchemy import Column
from sqlalchemy import Numeric
from sqlalchemy import Unicode
from sqlalchemy import UnicodeText
from sqlalchemy import Text
from sqlalchemy import Boolean
from sqlalchemy import SmallInteger
from sqlalchemy import Integer
from sqlalchemy import BigInteger
from sqlalchemy import BINARY
from sqlalchemy import ForeignKeyConstraint
from sqlalchemy import PrimaryKeyConstraint
from sqlalchemy import UniqueConstraint
from sqlalchemy import Index
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.dialects.postgresql import BYTEA
from sqlalchemy.sql import text

import sbds.sbds_json

from ..{{op_rel_import_dot}}import Base
from ...{{op_rel_import_dot}}enums import operation_types_enum
from ...{{op_rel_import_dot}}enums import asset_types_enum
from ...{{op_rel_import_dot}}field_handlers import json_string_field
from ...{{op_rel_import_dot}}field_handlers import amount_field
from ...{{op_rel_import_dot}}field_handlers import amount_symbol_field
from ...{{op_rel_import_dot}}field_handlers import comment_body_field
from ...{{op_rel_import_dot}}field_handlers import binary_field
from ...{{op_rel_import_dot}}field_handlers import accounts_field


class {{op_class_name}}(Base):
    """

    {% include 'blockchain_example.tmpl' %}

    {% include 'cpp_source.tmpl' %}

    """

    __tablename__ = '{{op_table_name}}'
    __table_args__ = (
        {%- for ref in refs %}
            {%  if ref.type == 'account_name_type' %}
        ForeignKeyConstraint(['{{ ref.field_name }}'], ['sbds_meta_accounts.name'],
            deferrable=True, initially='DEFERRED', use_alter=True),
            {% endif %}
        {% endfor -%}
        {%- if op_is_virtual %}
        # not yet supported Index('block_num', 'transaction_num', 'operation_num','op_virtual', unique=True),
        Index('ix_sbds_{{ op_table_name }}_unique', 'block_num', 'transaction_num', 'operation_num', text("MD5('raw')"), unique=True),
        {%- else -%}
        Index('ix_sbds_{{ op_table_name }}_unique', 'block_num', 'transaction_num', 'operation_num', unique=True),
        {%  endif -%}
        {%  if refs|length > 0 -%}
        Index('ix_{{op_table_name}}_accounts','accounts', postgresql_using='gin', postgresql_ops={'accounts':'jsonb_path_ops'})
        {% endif %}
    )

    _id = Column(BigInteger, autoincrement=True, primary_key=True)
    block_num = Column(Integer, nullable=False)
    transaction_num = Column(SmallInteger, nullable=False)
    operation_num = Column(SmallInteger, nullable=False)
    timestamp = Column(DateTime(timezone=False))
    trx_id = Column(Text, nullable=False)
    accounts = Column(JSONB)
    raw = Column(JSONB)

    {% for col in op_columns -%}
        {{col}}
    {% endfor -%}
    operation_type = Column(operation_types_enum,nullable=False,default='{{name}}')


    _fields = dict(
        {% for field in op_fields -%}
            {{field}}
        {% endfor -%}
        {%  if refs|length > 0 -%}
        accounts=lambda x: accounts_field(x,'{{op_short_name}}'),
        {%  endif -%}
    )

    _account_fields = frozenset([{% for ref in refs %}'{{ ref.field_name }}',{% endfor %}])
